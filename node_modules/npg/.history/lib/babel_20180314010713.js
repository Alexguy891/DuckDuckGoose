const path = require("path");
const fse = require("fs-extra");
const chalk = require("chalk");
const babel = require("@babel/core");
const klawSync = require("klaw-sync");

const paths = require("./paths");

module.exports = (options = {}) => {
  // Ensure that the "dist" directory is created.
  fse.ensureDirSync(paths.pkg.dist);
  // Empty the "dist" directory.
  fse.emptyDirSync(paths.pkg.dist);

  const files = klawSync(paths.pkg.src);
  files.forEach(file => {
    if (!file.stats.isFile()) {
      return;
    }
    const { code, map } = babel.transformFileSync(file.path, {
      babelrc: false,
      // minified: true,
      // comments: false,
      sourceMaps: true,
      plugins: [
        paths.npg.plugins.proposalClassProperties,
        paths.npg.plugins.proposalObjectRestSpread,
        paths.npg.plugins.transformRuntime
      ],
      presets: [[paths.npg.presets.env, { targets: { node: options.version } }]]
    });
    const relativePath = path.relative(paths.pkg.src, file.path);
    const distFilePath = path.resolve(paths.pkg.dist, relativePath);
    fse.outputFileSync(distFilePath, code, { encoding: "utf8" });
    fse.outputFileSync(distFilePath + ".map", JSON.stringify(map), {
      encoding: "utf8"
    });
  });
};
